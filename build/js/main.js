const form=document.getElementById("comment-form"),commentSection=document.querySelector(".comments__section");let commentCount=0,commentId=0,commentCounter=document.getElementById("count"),imgNotLikeSrc="./img/not-like.svg",imgLikeSrc="./img/like.svg";function submitOnEnter(e){"Enter"!==e.key||e.shiftKey||(e.preventDefault(),e.target.closest("#comment-form").dispatchEvent(new Event("submit")))}function validateForm(t){t.preventDefault();var t=t.target,e=(t.sender.value=t.sender.value.trim(),t.text.value=t.text.value.trim(),t.sender.checkValidity()),r=t.text.checkValidity(),n=t.date.checkValidity();if(e&&n&&r){let e;e=""===t.date.value?t.date.max:t.date.value,submitComment({sender:t.sender.value,text:t.text.value,date:e})}}function checkDateInput(){var e=document.createElement("input"),t=(e.setAttribute("type","date"),"not-a-date");return e.setAttribute("value",t),e.value!==t}function displayErrorMessage(e,t){document.querySelector(".error__"+t).innerHTML=e}function submitComment({sender:e,text:t,date:r}){commentCount++,commentCounter.textContent=commentCount;var n=document.querySelector(".comments__section"),a=document.createElement("li"),e=(a.className="comments__comment",a.id="comment-"+commentId++,a.dataset.like="0",a.insertAdjacentHTML("afterbegin",` <div class="comment" tabindex="-1">
                            <div class="comment__info">
                            <div class="comment__sender"></div>
                            <div class="comment__datetime"></div></div>
                            <div class="comment__text"></div></div><div class="comment__options">
                            <div class="comment__like"><img src="./img/not-like.svg" alt="Мне нравится" title="Мне нравится"></div>
                            <div class="comment__delete"><img src="./img/trash.svg" alt="Удалить комментарий" title="Удалить комментарий"></div></div>`),a.querySelector(".comment__sender").textContent=e,a.querySelector(".comment__text").textContent=t,buildDateObj(r.split("-")));a.querySelector(".comment__datetime").textContent=e.date,a.dataset.date=e.dateStr,a.dataset.time=e.timeStr,n.prepend(a)}function buildDateObj([e,t,r]){var n=Date.parse(e+`-${t}-`+r),a=Date.parse(form.date.max),o=a-864e5,m=(new Date).toLocaleTimeString().slice(0,5),r=r+`.${t}.`+e,t={timeStr:m,dateStr:r};return t.date=n===a?"сегодня, "+m:n===o?"вчера, "+m:r+", "+m,t}form.date.max=(new Date).toLocaleDateString("fr-ca"),form.addEventListener("keydown",submitOnEnter),form.addEventListener("submit",validateForm),form.sender.oninvalid=e=>{e=e.target.value;0===e.length?displayErrorMessage("Имя не может быть пустым или<br> состоять только из пробелов","sender"):e.length<6||30<e.length?displayErrorMessage("Имя должно иметь длину от 6 до 30 символов","sender"):/^[a-zA-Zа-яА-Я0-9\-_ ]{6,30}$/g.test(e)||displayErrorMessage("Имя может содержать:<br>- русский и латинский алфавит<br>- цифры (0 - 9)<br>- дефис и нижнее подчеркивание","sender")},form.date.oninvalid=e=>{if(!checkDateInput()){var t=new Date;if(dateStr=e.target.value.trim(),!(regex=/^(0[1-9]|[12][0-9]|3[01])[-](0[1-9]|1[012])[-](19|20)\d\d$/g).test(dateStr))return void displayErrorMessage("Дата должна быть в формате:<br>дд-мм-гггг","date");var[e,r,n]=dateStr.split("-"),e=+e;if(r-=1,(n=+n)<1970||n>t.getFullYear())return void displayErrorMessage("Год должен быть между 1970 и "+t.getFullYear(),"date");if(new Date(n,1+r,0).getDate()<e)return void displayErrorMessage("Введена некорректная дата","date")}displayErrorMessage("Введена некорректная дата","date")},form.text.oninvalid=e=>{0===e.target.value.length&&displayErrorMessage("Комментарий не может быть пустым или состоять только из пробелов","text")},form.sender.oninput=()=>{document.querySelector(".error__sender").innerHTML=""},form.sender.onfocus=e=>{e.target.placeholder=""},form.sender.onblur=e=>{""===e.target.value&&(e.target.placeholder="Ваше имя")},form.text.oninput=e=>{document.querySelector(".error__text").innerHTML="",e.target.placeholder=""},form.text.onfocus=e=>{e.target.placeholder=""},form.text.onblur=e=>{""===e.target.value&&(e.target.placeholder="Ваш комментарий...")},form.date.onkeydown=()=>{checkDateInput()&&(document.querySelector(".error__date").innerHTML="")},form.date.oninput=()=>{checkDateInput()||(document.querySelector(".error__date").innerHTML="")},form.date.onfocus=e=>{e.target.placeholder=""},form.date.onblur=e=>{""!==e.target.value||checkDateInput()||(e.target.placeholder="дд-мм-гггг")},commentSection.onclick=e=>{var e=e.target,t=e.closest(".comments__comment")??null;e.closest(".comment__delete")&&t&&(t.remove(),commentCount--,commentCounter.textContent=commentCount),e.closest(".comment__like")&&t&&("0"===t.dataset.like?(t.dataset.like="1",e.src=imgLikeSrc,e.title="Мне не нравится",e.alt="Мне не нравится"):(t.dataset.like="0",e.src=imgNotLikeSrc,e.title="Мне нравится",e.alt="Мне нравится"))};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
